version: "3.8"
services:
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"   # internal docker-to-docker
      - "29092:29092" # external host access
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      retries: 5
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  redpanda:
    image: redpandadata/redpanda:v24.2.3
    container_name: redpanda
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp 1
      - --memory 1G
      - --reserve-memory 0M
      - --node-id 0
      - --check=false
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      CLUSTER_ID: ${CLUSTER_ID:-3fa85f64-5717-4562-b3fc-2c963f66afa6}
    ports:
      - "9093:9093"       # Kafka client port
      - "9644:9644"       # Redpanda admin API
      - "8080:8080"       # Metrics HTTP endpoint for Prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9644/v1/status/ready"]
      interval: 10s
      retries: 5
    volumes:
      - redpanda-data:/var/lib/redpanda/data
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: kafka-exporter
    ports:
      - "9308:9308"  # Expose Kafka exporter metrics
    environment:
      - KAFKA_SERVER=kafka:9092
      # Optional: Uncomment to filter specific consumer groups or topics
      # - GROUP_FILTER=my-consumer-group
      # - TOPIC_FILTER=my-topic
    depends_on:
      - kafka
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9308/metrics"]
      interval: 10s
      retries: 5
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on:
      - redpanda
      - kafka-exporter
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=admin
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring-net
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

volumes:
  redpanda-data:
    name: redpanda-data

networks:
  monitoring-net:
    driver: bridge